{"version":3,"sources":["api.js","User.js","Pagination.js","Table.js","App.js","store.js","index.js"],"names":["getUsers","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","data","wrap","_context","prev","next","fetch","proxyUrl","sent","json","abrupt","users","stop","apply","this","arguments","User","user","react_default","createElement","id","name","surname","desc","connect","dispatch","changePage","event","type","target","value","className","onClick","e","state","currentPage","_ref$users","filter","map","src_User","key","App","setUsers","props","count","src_Table","src_Pagination","React","Component","length","store","createStore","action","objectSpread","subscribe","console","log","getState","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.a8d72a39.chunk.js","sourcesContent":["const BASE_URL = 'http://dev.frevend.com/json/users.json';\n/// for allowed access from CORS\nconst proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n\nexport const getUsers = async () => {\n    const response = await fetch(proxyUrl + BASE_URL);\n    const data = await response.json();\n    return data.users;\n};","import React from 'react';\n\nconst User = ({ user }) => (\n    <tr>\n        <td>{user.id}</td>\n        <td>{user.name}</td>\n        <td>{user.surname}</td>\n        <td>{user.desc}</td>\n    </tr>\n);\n\nexport default User;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nexport const per_page = 5;\n\nconst Pagination = ({ changePage }) => (\n    <div className=\"pagination\" onClick={(e) => changePage(e)}>\n        <button type=\"button\" name=\"prev\" value=\"prev\">{\"<\"}</button>\n        <button type=\"button\" name=\"1\" value=\"1\">1</button>\n        <button type=\"button\" name=\"2\" value=\"2\">2</button>\n        <button type=\"button\" name=\"3\" value=\"3\">3</button>\n        <button type=\"button\" name=\"4\" value=\"4\">4</button>\n        <button type=\"button\" name=\"next\" value=\"next\">></button>\n    </div>\n)\n\nconst mapDispatch = (dispatch) => ({\n    changePage: (event) => dispatch({ type: \"CHANGE_PAGE\", target: event.target, value: event.target.value }),\n});\n\nexport default connect(null, mapDispatch)(Pagination);","import React from 'react';\nimport { connect } from 'react-redux';\nimport User from './User'\nimport { per_page } from './Pagination'\n\nconst Table = ({ users = [], currentPage }) => (\n    <table className=\"table-users\">\n        <thead>\n            <tr>\n                <th>Number</th>\n                <th>name</th>\n                <th>surname</th>\n                <th>description</th>\n            </tr>\n        </thead>\n        <tbody>\n            {users.filter(user => ((user.id > currentPage * per_page - per_page) && (user.id <= currentPage * per_page)))\n                .map(user => (\n                    <User\n                        key={user.id}\n                        user={user}\n                    />\n                ))}\n        </tbody>\n    </table>\n);\n\nconst mapState = (state) => {\n    return {\n        users: state.users,\n        currentPage: state.currentPage\n    };\n};\n\nexport default connect(mapState)(Table);","import React from 'react';\nimport './App.css';\nimport { getUsers } from './api';\nimport { connect } from 'react-redux';\nimport Table from './Table';\nimport Pagination from './Pagination';\n\nclass App extends React.Component {\n  async componentDidMount() {\n    const { setUsers } = this.props;\n    const users = await getUsers();\n    setUsers(users);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Table of <span>{this.props.count}</span> users</h1>\n        <Table />\n        <Pagination />\n      </div>);\n  }\n}\n\nconst mapState = (state) => {\n  return {\n    count: state.users.length,\n  };\n};\n\nconst mapDispatch = (dispatch) => ({\n  setUsers: (users) => dispatch({ type: \"SET_USERS\", users: users }),\n});\n\nexport default connect(mapState, mapDispatch)(App);","import { createStore } from 'redux';\n\nconst initialState = {\n    users: [],\n    currentPage: 1,\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"SET_USERS\":\n            return {\n                ...state,\n                users: action.users,\n            }\n        case \"CHANGE_PAGE\":\n            let value = action.value;\n            if (!action.target === \"button\") {\n                return state\n            }\n            if (value === \"next\") {\n                if (state.currentPage < 4) {\n                    return {\n                        ...state,\n                        currentPage: state.currentPage + 1\n                    }\n                } else return state;\n            }\n            if (value === \"prev\") {\n                if (state.currentPage > 1) {\n                    return {\n                        ...state,\n                        currentPage: state.currentPage - 1\n                    }\n                } else return state;\n            }\n            return {\n                ...state,\n                currentPage: +value\n            }\n        default:\n            return state;\n    }\n};\n\nconst store = createStore(reducer, initialState);\n\nstore.subscribe(() => {\n    console.log(store.getState());\n})\n\nexport default store;\n\nexport const usersCount = (state) => {\n    return state.users.length;\n};\n\n\n\n\n///// variant2\n\n// const loadingReducer = (state = [], action) => {\n//     switch (action.type) {\n//         case \"SET_USERS\":\n//             return {\n//                 ...state,\n//                 users: action.users,\n//             }\n//         default:\n//             return state;\n//     }\n// };\n\n// const paginationReducer = (state = 1, action) => {\n//     switch (action.type) {\n//         case \"CHANGE_PAGE\":\n//             let value = action.value;\n//             if (!action.target === \"button\") {\n//                 return state\n//             }\n//             if (value === \"next\") {\n//                 if (state < 4) {\n//                     return {\n//                         currentPage: state + 1\n//                     }\n//                 } else return state;\n//             }\n//             if (value === \"prev\") {\n//                 if (state > 1) {\n//                     return {\n//                         currentPage: state - 1\n//                     }\n//                 } else return state;\n//             }\n//             return {\n//                 currentPage: +value\n//             }\n//         default:\n//             return state;\n//     }\n// };\n\n// const reducer = (state = {}, action) => {\n//     return {\n//         users: loadingReducer(state.users, action),\n//         currentPage: paginationReducer(state.currentPage, action)\n//     }\n// };\n\n\n/// var3\n// import { createStore, combineReducers } from 'redux';\n\n// export const setUsers = (users) => {\n//     return {\n//         type: \"SET_USERS\",\n//         users: users,\n//     };\n// };\n\n// export const changePage = (event) => {\n//     return {\n//         type: \"CHANGE_PAGE\",\n//         value: event.target.value,\n//     };\n// };\n// import loadingReducer from './redux/users'\n// import paginationReducer from './redux/p'\n\n// const reducer2 = combineReducers({\n//   users: loadingReducer,\n//   currentPage: paginationReducer\n// });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}